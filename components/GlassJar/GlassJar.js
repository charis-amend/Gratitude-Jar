/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/
// import CrumpledPaper from "../CrumbledPaper/CrumbledPaper.js"

import { Suspense } from 'react'
import { GLTFLoader } from "three/examples/jsm/loaders/GLTFLoader";
import { useLoader, Canvas } from "@react-three/fiber";
import { EnvironmentMap, OrbitControls, Preload } from '@react-three/drei'
import React from "react";
import { Html, useProgress } from "@react-three/drei";
import Image from 'next/image';
import { AnimationAction, BackSide, DoubleSide, FrontSide, MeshMatcapMaterial, MeshPhysicalMaterial, MeshStandardMaterial, NormalBlending } from 'three';
import { useFrame } from '@react-three/fiber'
import { useRef } from 'react';
import { useSpring, animated } from '@react-spring/three'


const Loader = () => {
    const { progress } = useProgress();

    return (
        <Html>
            <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2">
                <div className="text-center">
                    <Image
                        priority
                        src="/preloadedGlasJar.png"
                        alt="placeholder-glasjar"
                        width={500}
                        height={500}
                    />

                    <p className="text-sm color text-white-100 font-extrabold p-3 justify-items-center">
                        {progress.toFixed(2)}%
                    </p>
                </div>
            </div>
        </Html >
    );
};


function GlassJarObject({ props }) {
    const { nodes, materials } = useLoader(GLTFLoader, "/jar-and-paper-scene.gltf");

    const animations = React.useRef()
    useFrame(({ clock }) => {
        const time = clock.getElapsedTime();
        console.log("time:", time)
    });

    // Creating a new instance of MeshStandardMaterial with depthTest overridden
    const customMaterialJar = new MeshPhysicalMaterial({
        ...materials.material_1, // Copy existing material properties
        depthTest: true, // Override depthTest to false so glass = transparent
        depthWrite: false, // Override depthTest to false so glass = transparent
        side: BackSide,
        blending: NormalBlending,
        transparent: true,
        reflectivity: 2.1,
    });
    const customMaterialLid = new MeshStandardMaterial({
        ...materials.material, // Copy existing material properties
        depthTest: true, // Override depthTest to true
        depthWrite: true,
    });
    // Creating a new instance of MestmatCap material to overwrite existing properties
    const customPaperMaterial = new MeshMatcapMaterial({
        ...materials.Map07,
        color: 0xffffff,
        side: FrontSide,
        transparent: false,
        depthTest: true,
        depthWrite: true,
        blending: NormalBlending,

    });

    return (
        <group {...props}
            dispose={null}
            scale={2}
            ref={animations}
        >
            <group
                name="Sketchfab_model"
                position={[0, 0, 0]}
            // rotation={[-Math.PI / 2, 0, 0]}
            >
                <group
                    name="Collada_visual_scene_group"
                    position={[0, 0, 0]}
                    scale={4}
                >
                    {/* jar: */}
                    <mesh
                        name="defaultMaterial"
                        castShadow
                        receiveShadow
                        geometry={nodes.defaultMaterial.geometry}
                        material={customMaterialJar}
                        userData={{ name: "defaultMaterial" }}
                    />

                    {/* top or  lid: */}
                    <mesh
                        name="defaultMaterial_1"
                        castShadow
                        receiveShadow
                        geometry={nodes.defaultMaterial_1.geometry}
                        material={customMaterialLid}
                        userData={{ name: "defaultMaterial" }}
                    />
                </group>
            </group>

            <group name="finalpapergltf" position={[6.897, 12.232, -0.181]}>
                <group name="Folded_Paperobj" scale={0.1}>
                    <mesh
                        name="Map07"
                        geometry={nodes.Map07.geometry}
                        material={customPaperMaterial}
                        rotation={[0, 0, 0.682]}
                    />
                </group>
            </group>
        </group>
    )
}

function Scene() {
    const { advance } = useThree();
    useInterval(() => advance(1), 1000);
    return (
        <>
            <EnvironmentMap background="black" />
            {/* <primitive object={roomTexture} attach="background" /> */}

            <spotLight
                name="SpotLight"
                intensity={20}
                angle={0.444}
                penumbra={1}
                decay={2}
                distance={2}
                position={[26.709, 34.772, 2.75]}
                rotation={[0.111, 0.048, 1.016]}
                scale={[39.767, 102.189, 209.574]}
                userData={{ name: "SpotLight" }}
            />
            <directionalLight
                name="DirectionalLight"
                intensity={5}
                decay={2}
                color="#fffaeb"
                position={[-13.409, 48.408, -0.96]}
                userData={{ name: "DirectionalLight" }}
            />
            <directionalLight
                name="DirectionalLightFromSide"
                intensity={5}
                decay={2}
                position={[-11.225, 13.52, -17.363]}
                rotation={[-1.168, 0, 0.04]}
                scale={10.927}
                userData={{ name: "DirectionalLightFromSide" }}
            />
            <pointLight
                name="PointLight"
                intensity={20}
                decay={2}
                color="#d2bdb1"
                position={[7.648, 13.877, 28.447]}
                rotation={[-2.318, 1.041, -2.644]}
                userData={{ name: "PointLight" }}
            />

            <OrbitControls
                enableZoom={false}
                enablePan={true}
                enableRotate={true}
            />

        </>
    )

}

export default function GlassJar() {


    return (
        <>
            <Canvas
                frameloop="demand"
                shadows
                camera={
                    {
                        position: [0, 10, 25], // position for scene and jar
                        // position: [10, 30, 20],  // position for paper
                        // fov: 100, //  for paper
                        fov: 50,
                        scale: [1, 1, 1],
                        rotation: [-13.7, 2.3, 0.58],
                        far: 1000,
                        near: 0.01,
                        frustumCulled: true,
                        visible: true,
                    }}>
                <Suspense fallback={<Loader />}>
                    <Scene />
                    <GlassJarObject />
                </Suspense>
            </Canvas >
        </>
    );
}
